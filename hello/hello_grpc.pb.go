// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: hello.proto

package helloworld

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Greetings_Connect_FullMethodName = "/helloworld.Greetings/Connect"
)

// GreetingsClient is the client API for Greetings service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GreetingsClient interface {
	Connect(ctx context.Context, opts ...grpc.CallOption) (Greetings_ConnectClient, error)
}

type greetingsClient struct {
	cc grpc.ClientConnInterface
}

func NewGreetingsClient(cc grpc.ClientConnInterface) GreetingsClient {
	return &greetingsClient{cc}
}

func (c *greetingsClient) Connect(ctx context.Context, opts ...grpc.CallOption) (Greetings_ConnectClient, error) {
	stream, err := c.cc.NewStream(ctx, &Greetings_ServiceDesc.Streams[0], Greetings_Connect_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &greetingsConnectClient{stream}
	return x, nil
}

type Greetings_ConnectClient interface {
	Send(*Hello) error
	Recv() (*World, error)
	grpc.ClientStream
}

type greetingsConnectClient struct {
	grpc.ClientStream
}

func (x *greetingsConnectClient) Send(m *Hello) error {
	return x.ClientStream.SendMsg(m)
}

func (x *greetingsConnectClient) Recv() (*World, error) {
	m := new(World)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GreetingsServer is the server API for Greetings service.
// All implementations must embed UnimplementedGreetingsServer
// for forward compatibility
type GreetingsServer interface {
	Connect(Greetings_ConnectServer) error
	mustEmbedUnimplementedGreetingsServer()
}

// UnimplementedGreetingsServer must be embedded to have forward compatible implementations.
type UnimplementedGreetingsServer struct {
}

func (UnimplementedGreetingsServer) Connect(Greetings_ConnectServer) error {
	return status.Errorf(codes.Unimplemented, "method Connect not implemented")
}
func (UnimplementedGreetingsServer) mustEmbedUnimplementedGreetingsServer() {}

// UnsafeGreetingsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GreetingsServer will
// result in compilation errors.
type UnsafeGreetingsServer interface {
	mustEmbedUnimplementedGreetingsServer()
}

func RegisterGreetingsServer(s grpc.ServiceRegistrar, srv GreetingsServer) {
	s.RegisterService(&Greetings_ServiceDesc, srv)
}

func _Greetings_Connect_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GreetingsServer).Connect(&greetingsConnectServer{stream})
}

type Greetings_ConnectServer interface {
	Send(*World) error
	Recv() (*Hello, error)
	grpc.ServerStream
}

type greetingsConnectServer struct {
	grpc.ServerStream
}

func (x *greetingsConnectServer) Send(m *World) error {
	return x.ServerStream.SendMsg(m)
}

func (x *greetingsConnectServer) Recv() (*Hello, error) {
	m := new(Hello)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Greetings_ServiceDesc is the grpc.ServiceDesc for Greetings service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Greetings_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "helloworld.Greetings",
	HandlerType: (*GreetingsServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Connect",
			Handler:       _Greetings_Connect_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "hello.proto",
}
